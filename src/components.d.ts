/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconSet } from "./components/icon/icon";
export { IconSet } from "./components/icon/icon";
export namespace Components {
    interface AirButton {
        "color": | "default"
    | "primary"
    | "success"
    | "info"
    | "warning"
    | "danger"
    | "ghost";
        "disabled": boolean;
        "icon": string;
        "loading": boolean;
        "selected": boolean;
        "size": "small" | "medium" | "large";
        "suffixIcon": string;
        "variant": | "solid"
    | "outline"
    | "text"
    | "neo"
    | "default";
    }
    interface AirButtonGroup {
        "customStyles": { [key: string]: string };
        "direction": "horizontal" | "vertical";
        "group": string;
        "spacing": string;
    }
    interface AirCard {
        "cardTitle": string;
        "content": string;
        "imageUrl": string;
        "isHighlighted": boolean;
        "size": 'small' | 'medium' | 'large';
    }
    interface AirIcon {
        "color": string;
        "iconSet": IconSet;
        "name": string;
        "size": string;
    }
    interface AirInput {
        "autofocus": boolean;
        "customClass": string;
        "customStyle": { [key: string]: string };
        "disabled": boolean;
        "error": boolean;
        "errorMessage": string;
        "label": string;
        "maxLength": number;
        "minLength": number;
        "name": string;
        "pattern": string;
        "placeholder": string;
        "required": boolean;
        "type": string;
        "value": string;
    }
    /**
     * @name AirText
     * @description Typography for rendering headlines, paragraphs, captions, and body text with various style options.
     * @category General
     * @example <air-text type="heading" level="1">Heading</air-text>
     */
    interface AirText {
        "color": | 'primary'
      | 'secondary'
      | 'tertiary'
      | 'helper'
      | 'error'
      | 'on-color'
      | 'inverse';
        "configAria": any;
        "expressive": boolean;
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        "headingSize": 1 | 2 | 3 | 4 | 5 | 6 | 7;
        "inline": boolean;
        "type": | 'code'
      | 'helper-text'
      | 'label'
      | 'legal'
      | 'heading'
      | 'body'
      | 'body-compact'
      | 'body-large'
      | 'body-emphasis'
      | 'fluid-heading';
    }
}
export interface AirButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAirButtonElement;
}
export interface AirCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAirCardElement;
}
declare global {
    interface HTMLAirButtonElementEventMap {
        "buttonClick": { event: MouseEvent; selected: boolean };
    }
    interface HTMLAirButtonElement extends Components.AirButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAirButtonElementEventMap>(type: K, listener: (this: HTMLAirButtonElement, ev: AirButtonCustomEvent<HTMLAirButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAirButtonElementEventMap>(type: K, listener: (this: HTMLAirButtonElement, ev: AirButtonCustomEvent<HTMLAirButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAirButtonElement: {
        prototype: HTMLAirButtonElement;
        new (): HTMLAirButtonElement;
    };
    interface HTMLAirButtonGroupElement extends Components.AirButtonGroup, HTMLStencilElement {
    }
    var HTMLAirButtonGroupElement: {
        prototype: HTMLAirButtonGroupElement;
        new (): HTMLAirButtonGroupElement;
    };
    interface HTMLAirCardElementEventMap {
        "cardClicked": void;
    }
    interface HTMLAirCardElement extends Components.AirCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAirCardElementEventMap>(type: K, listener: (this: HTMLAirCardElement, ev: AirCardCustomEvent<HTMLAirCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAirCardElementEventMap>(type: K, listener: (this: HTMLAirCardElement, ev: AirCardCustomEvent<HTMLAirCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAirCardElement: {
        prototype: HTMLAirCardElement;
        new (): HTMLAirCardElement;
    };
    interface HTMLAirIconElement extends Components.AirIcon, HTMLStencilElement {
    }
    var HTMLAirIconElement: {
        prototype: HTMLAirIconElement;
        new (): HTMLAirIconElement;
    };
    interface HTMLAirInputElement extends Components.AirInput, HTMLStencilElement {
    }
    var HTMLAirInputElement: {
        prototype: HTMLAirInputElement;
        new (): HTMLAirInputElement;
    };
    /**
     * @name AirText
     * @description Typography for rendering headlines, paragraphs, captions, and body text with various style options.
     * @category General
     * @example <air-text type="heading" level="1">Heading</air-text>
     */
    interface HTMLAirTextElement extends Components.AirText, HTMLStencilElement {
    }
    var HTMLAirTextElement: {
        prototype: HTMLAirTextElement;
        new (): HTMLAirTextElement;
    };
    interface HTMLElementTagNameMap {
        "air-button": HTMLAirButtonElement;
        "air-button-group": HTMLAirButtonGroupElement;
        "air-card": HTMLAirCardElement;
        "air-icon": HTMLAirIconElement;
        "air-input": HTMLAirInputElement;
        "air-text": HTMLAirTextElement;
    }
}
declare namespace LocalJSX {
    interface AirButton {
        "color"?: | "default"
    | "primary"
    | "success"
    | "info"
    | "warning"
    | "danger"
    | "ghost";
        "disabled"?: boolean;
        "icon"?: string;
        "loading"?: boolean;
        "onButtonClick"?: (event: AirButtonCustomEvent<{ event: MouseEvent; selected: boolean }>) => void;
        "selected"?: boolean;
        "size"?: "small" | "medium" | "large";
        "suffixIcon"?: string;
        "variant"?: | "solid"
    | "outline"
    | "text"
    | "neo"
    | "default";
    }
    interface AirButtonGroup {
        "customStyles"?: { [key: string]: string };
        "direction"?: "horizontal" | "vertical";
        "group"?: string;
        "spacing"?: string;
    }
    interface AirCard {
        "cardTitle"?: string;
        "content"?: string;
        "imageUrl"?: string;
        "isHighlighted"?: boolean;
        "onCardClicked"?: (event: AirCardCustomEvent<void>) => void;
        "size"?: 'small' | 'medium' | 'large';
    }
    interface AirIcon {
        "color"?: string;
        "iconSet"?: IconSet;
        "name"?: string;
        "size"?: string;
    }
    interface AirInput {
        "autofocus"?: boolean;
        "customClass"?: string;
        "customStyle"?: { [key: string]: string };
        "disabled"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        "label"?: string;
        "maxLength"?: number;
        "minLength"?: number;
        "name"?: string;
        "pattern"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    /**
     * @name AirText
     * @description Typography for rendering headlines, paragraphs, captions, and body text with various style options.
     * @category General
     * @example <air-text type="heading" level="1">Heading</air-text>
     */
    interface AirText {
        "color"?: | 'primary'
      | 'secondary'
      | 'tertiary'
      | 'helper'
      | 'error'
      | 'on-color'
      | 'inverse';
        "configAria"?: any;
        "expressive"?: boolean;
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        "headingSize"?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
        "inline"?: boolean;
        "type"?: | 'code'
      | 'helper-text'
      | 'label'
      | 'legal'
      | 'heading'
      | 'body'
      | 'body-compact'
      | 'body-large'
      | 'body-emphasis'
      | 'fluid-heading';
    }
    interface IntrinsicElements {
        "air-button": AirButton;
        "air-button-group": AirButtonGroup;
        "air-card": AirCard;
        "air-icon": AirIcon;
        "air-input": AirInput;
        "air-text": AirText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "air-button": LocalJSX.AirButton & JSXBase.HTMLAttributes<HTMLAirButtonElement>;
            "air-button-group": LocalJSX.AirButtonGroup & JSXBase.HTMLAttributes<HTMLAirButtonGroupElement>;
            "air-card": LocalJSX.AirCard & JSXBase.HTMLAttributes<HTMLAirCardElement>;
            "air-icon": LocalJSX.AirIcon & JSXBase.HTMLAttributes<HTMLAirIconElement>;
            "air-input": LocalJSX.AirInput & JSXBase.HTMLAttributes<HTMLAirInputElement>;
            /**
             * @name AirText
             * @description Typography for rendering headlines, paragraphs, captions, and body text with various style options.
             * @category General
             * @example <air-text type="heading" level="1">Heading</air-text>
             */
            "air-text": LocalJSX.AirText & JSXBase.HTMLAttributes<HTMLAirTextElement>;
        }
    }
}
